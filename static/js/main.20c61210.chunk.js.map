{"version":3,"sources":["header & footer/header.js","header & footer/footer.js","Gridcell/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Footer","props","draw","isgameactive","text","Gridcell","className","onClick","handleclick","index","id","val","App","useState","clk","setclk","setdraw","setisgameactive","player","setplayer","winning_condition","copied","arr","i","length","winningcondition","a","b","c","iswinner","includes","map","ele","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAOeA,EALD,WACV,OACI,8CCQOC,EAVD,SAACC,GAEX,OACI,6BAAMA,EAAMC,KAAP,OAAmC,GAAtBD,EAAME,aAAN,UAA+BF,EAAMG,KAArC,sBAAyDH,EAAMG,KAA/D,oBCMXC,G,MARG,SAACJ,GAGf,OACI,qBAAKK,UAAU,OAAOC,QAAU,WAAKN,EAAMO,YAAYP,EAAMQ,QAASC,GAAKT,EAAMQ,MAAjF,SAAyFR,EAAMU,QCoExFC,MArEf,WAAgB,IAAD,EACOC,mBAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KADzC,mBACPC,EADO,KACHC,EADG,OAEYF,oBAAS,GAFrB,mBAEPX,EAFO,KAEAc,EAFA,OAGyBH,oBAAS,GAHlC,mBAGPV,EAHO,KAGMc,EAHN,OAIeJ,mBAAS,KAJxB,mBAIPK,EAJO,KAIEC,EAJF,KAKLC,EAAoB,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IAGpFZ,EAAc,SAACC,GAKnB,GAAGN,IAAiBD,EACpB,CACE,IAAMmB,EAAM,YAAOP,GACrBO,EAAOZ,GAASS,EAChBH,GAAO,SAAAD,GAAG,OAAIO,KAgBhB,SAAkBC,GAEhB,IAAI,IAAIC,EAAE,EAAEA,EAAEH,EAAkBI,OAAOD,IAAI,CACzC,IAAME,EAAmBL,EAAkBG,GACvCG,EAAGJ,EAAIG,EAAiB,IACxBE,EAAGL,EAAIG,EAAiB,IACxBG,EAAGN,EAAIG,EAAiB,IAIzBC,IAAKC,GAAKA,IAAIC,GAAQ,IAAHF,GAAY,IAAHC,EAAW,IAAHC,IAGnCX,GAAiBd,GACjBgB,GAAW,SAAAD,GAAM,MAAY,KAATA,EAAa,IAAI,SA5B3CW,CAASR,GAUKC,EATPD,EAUPL,GAAQ,SAAAd,GAAI,OAAKoB,EAAIQ,SAAS,OAT9BX,GAAW,SAAAD,GAAM,MAAY,KAATA,EAAa,IAAI,OAQvC,IAAgBI,GAyBhB,OACE,qCACC,cAAC,EAAD,IACA,qBAAKhB,UAAU,QAAf,SAEGQ,EAAIiB,KAAI,SAACC,EAAMvB,GACb,OAAQ,cAAC,EAAD,CAAUD,YAAeA,EAAaC,MAAOA,EAAOE,IAAKqB,SAItE,cAAC,EAAD,CAAQ5B,KAAQc,EAAQf,aAAgBA,EAAcD,KAAQA,QC1DpD+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20c61210.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header =()=> {\r\n    return (\r\n        <h1>Tic Tac Toe</h1>\r\n    )\r\n}\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nconst Footer =(props)=> {\r\n        \r\n    return (\r\n        <h2>{!props.draw?(props.isgameactive == true? `${props.text}'s turns` : `${props.text} won the game`): `Draw`} \r\n                        \r\n            \r\n            \r\n    </h2>\r\n    )\r\n}\r\nexport default Footer;","import React from 'react'\r\nimport \"./style.css\"\r\n\r\n const Gridcell = (props)=> {\r\n    \r\n \r\n    return (\r\n        <div className=\"cell\" onClick={ ()=>{props.handleclick(props.index)}} id ={props.index}>{props.val}</div>\r\n    );\r\n}\r\n\r\nexport default Gridcell;","import React from \"react\"\r\nimport {useState} from \"react\"\r\nimport './App.css';\r\nimport Header from \"./header & footer/header\"\r\nimport Footer from \"./header & footer/footer\"\r\nimport Gridcell from \"./Gridcell\"\r\nfunction App() {\r\n  const[clk,setclk] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]);\r\n  const[draw , setdraw]  = useState(false);\r\n  const[isgameactive,setisgameactive] = useState(true)\r\n  const[player , setplayer] = useState(\"X\");\r\n    const winning_condition = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];\r\n  \r\n    //console.log(clk);\r\n  const handleclick = (index)=>{\r\n    //console.log(index);\r\n    \r\n\r\n    \r\n    if(isgameactive && !draw )\r\n    {\r\n      const copied = [...clk];\r\n    copied[index] = player;\r\n    setclk(clk => copied);\r\n    \r\n    iswinner(copied);\r\n    isdraw(copied);\r\n    setplayer( player =>player ==\"X\"?\"0\":\"X\");\r\n     \r\n      \r\n\r\n    }\r\n    \r\n \r\n  }\r\n  function isdraw(arr){\r\n    setdraw(draw => !arr.includes(\"\"))\r\n\r\n  }\r\n  function iswinner(arr)\r\n  {\r\n    for(let i=0;i<winning_condition.length;i++){\r\n      const winningcondition = winning_condition[i];\r\n      let a =arr[winningcondition[0] ];\r\n      let b =arr[winningcondition[1] ];\r\n      let c= arr[winningcondition[2] ];\r\n  \r\n     \r\n      \r\n      if(a ===b && b===c && a!=\"\" && b!=\"\" & c!=\"\")\r\n      {\r\n          //console.log(player + \"wins\");\r\n          setisgameactive(!isgameactive);\r\n          setplayer( player =>player ==\"X\"?\"0\":\"X\");\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n     <Header/>\r\n     <div className=\"board\">\r\n      {\r\n        clk.map((ele , index)=>{\r\n          return (<Gridcell handleclick = {handleclick} index={index} val={ele} />);\r\n        })\r\n      }\r\n    </div>\r\n     <Footer text = {player} isgameactive = {isgameactive} draw = {draw}/> \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}